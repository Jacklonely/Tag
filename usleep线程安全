http://blog.csdn.net/wind19/article/details/7541811

linux 下面的sleep，usleep，nanosleep 和select比较 
标签： linuxnullsolaris平台多线程编译器 
2012-05-07 11:56 4299人阅读 评论(1) 收藏 举报 
本文章已收录于： 
分类： 
Linux Programming（42） 
作者同类文章X
版权声明：本文为博主原创文章，未经博主允许不得转载。
sleep 时间单位是秒
usleep的时间单位是微秒
select的精度是微妙，精确
struct?timeval?delay;
delay.tv_sec?=?0;
delay.tv_usec?=?20?*?1000;?//?20?ms
select(0,?NULL,?NULL,?NULL,?&delay);
usleep()有有很大的问题
1.	在一些平台下不是线程安全，如HP-UX以及Linux
2.	usleep()会影响信号
3.	在很多平台，如HP-UX以及某些Linux下，当参数的值必须小于1 * 1000 * 1000也就是1秒，否则该函数会报错，并且立即返回。
4.	大部分平台的帮助文档已经明确说了，该函数是已经被舍弃的函数。
还好，POSIX规范中有一个很好用的函数，nanosleep()，该函数没有usleep()的这些缺点，它的精度是纳秒级。在Solaris的多线程环境下编译器会自动把usleep()连接成nanosleep()。
Linux下短延时推荐使用select函数，因为准确.

-----------------------------------------------------------------------------------------------------------------

http://www.cnblogs.com/colin-chan/archive/2013/02/03/2890708.html

linux线程中usleep卡死问题 
之前的一个项目遇到过一个linux线程中usleep卡死问题。
细查之下，发现usleep是非可重入的，也是非线程安全的。

http://blog.csdn.net/netnote/article/details/5286347
碰上usleep导致线程堵塞的问题：
?
线程莫名堵塞，使用gdb attach上去，发现线程堵在usleep调用里——想起好像听说过其他同事碰到过这样的问题。将usleep改成select。

-----------------------------------------------------------------------------------------------------------------

使用USLEEP有许多不确定的情况：

http://blog.csdn.net/learnhard/article/details/5699505

如果你的程序有多个无限循环的子线程（周期性地完成某一任务），当程序结束的时候，为了能够优雅地退出这些线程，通常都会先在子线程的while()无限循环中，设置一个（全局）运行标志，例如：

while (g_flag)

{

/////////////////////////////////////

// do something periodically 

/////////////////////////////////////

 

usleep(1000000); // sleep for 1 second 

}

然后，在主线程中可以注册一个信号处理函数，在该函数中改变全局变量g_flag的值为false，这样，向程序发送一个信号的时候，就可以使得子线程的运行标志改变，从而退出，然后程序也就可以退出了。
 
今天发现一个问题，在为SIGINT信号注册的处理函数中，改变了全局运行标志的值，程序却依然没有退出，究其原因，发现是子线程中使用的usleep函数与触发的信号发生了一段缠绵悱恻的爱情，从而导致神经错乱，然后就不正常了。
 
其实我们应该使用精度更高的nanosleep()函数，当然追求的并不一定是精度，而是使程序能正常运行。

-----------------------------------------------------------------------------------------------------------------

http://www.cppblog.com/prayer/archive/2008/08/21/59572.aspx

测试程序

-----------------------------------------------------------------------------------------------------------------
